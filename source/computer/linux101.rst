Linux 入门
==========

本章主要介绍 Linux 系统的入门级基础。

.. toctree::
   :maxdepth: 2

   command-line 
   file-operations

Shell 基础
----------

重定向
^^^^^^

管道
^^^^

通配符
^^^^^^

正则表达式
^^^^^^^^^^

环境变量
--------


编辑器
------

我们可以在终端输入命令，交给系统执行。但是要编辑 Shell 的启动文件和其它配置文件，或者日常编写代码时，
我们使用一个叫做编辑器的程序，即一个允许移动光标在屏幕上编辑文字的程序。编辑器是软件开发人员
用来写代码，以及系统管理员用来管理控制系统的配置文件的重要工具。日常科研需要至少掌握一种编辑器。

编辑器分为两种基本类型：图形化的和基于命令行的。当我们编程的时候，会经常在文件间进行切换、阅读、
浏览和修改代码，而不是连续编写一大段的文字。因此代码编辑器和纯文本编辑器是很不同的两种工具。

作为程序员，我们大部分时间都花在代码编辑上，所以花点时间掌握某个适合自己的编辑器是非常值得的。
通常学习使用一个新的编辑器包含以下步骤：

- 阅读教程，比如本教程
- 坚持使用它来完成你所有的编辑工作，即使一开始这会让工作效率降低
- 随时查阅：如果某个操作看起来像是有更方便的实现方法，一般情况下真的会有

如果遵循上述步骤，并且坚持使用新的编辑器完成所有的编辑任务，那么学习一个复杂的代码编辑器的过程
一般是这样的：

- 前两个小时学习编辑器的基本操作。例如，打开和编辑文件、保存与退出等
- 学习时间累计达到20个小时之后，使用新编辑器的效率应该已经和使用老编辑器一样快
- 此后，新编辑器地益处开始显现，因为有了足够的知识和肌肉记忆后，使用新编辑器将大大节省时间
  
现代编辑器都是一个复杂且强大的工具，永远有新东西可学：学的越多，效率越高。

该学哪个编辑器？这个问题没有标准答案，选择其中一个一直用下去，遇到需要重复劳动或者不顺心的地方
就去找各种配置和插件。Linux 系统一般自带了一个叫做 gedit 的图形化编辑器，但是使用该编辑器来
写程序效率太低，不建议使用。Visual Studio Code 是目前最流行的代码编辑器，vim 是最流行的基于
命令行的编辑器。本文主要介绍 vim 编辑器。

vim 简介
^^^^^^^^^

`vim <https://www.vim.org/>`__ 编辑器是一款基于命令行的编辑器，推荐地震学科研工作者学习和掌握该编辑器：

- vim 的快捷键和插件配置，可以让我们使用键盘快速地完成文本编辑。vim 避免了使用鼠标，甚至避免用上下左右键，
  因为这些需要太多的手指移动
- vim 轻量级且执行快。对于许多简单任务，启动 vim 比使用图形化编辑器要快地多
- vim 在很多 Linux 发行版都预装了，某些时候可能是我们唯一能使用的编辑器，比如使用远程服务器

在大多数 Linux 发行版中，vim 也可以用 vi 替代。可以使用以下命令查看::

    $ which vim
    /usr/bin/vim
    $ which vi                          
    vi=vim

vim 操作模式
^^^^^^^^^^^^^

Vim 的设计以大多数时间都花在阅读、浏览和进行少量编辑改动为基础，因此它具有多种操作模式：

- 命令模式：在文件中四处移动光标进行修改
- 插入模式（INSERT）：插入文本
- 替换模式（REPLACE）：替换文本
- 可视化模式：用于选中文本块，分为可视化（VISUAL）、可视化行（VISUAL LINE）、可视化块（VISUAL BLOCK）

在不同的操作模式下，键盘敲击的含义也不同。vim 默认会在左下角显示当前的操作模式。启动时的默认模式是正常模式，
可以使用以下方式，在不同模式只见进行切换：

- 按下 :kbd:`Esc` 键可以从任何其他模式返回命令模式
- 在命令模式下，按 :kbd:`i` 键进入插入模式
- 在命令模式下，按 :kbd:`Shift` + :kbd:`R` 键进入替换模式
- 在命令模式下，按 :kbd:`v` 键进入可视化（一般）模式
- 在命令模式下，按 :kbd:`Shift` + :kbd:`v` 键进入可视化（行）模式
- 在命令模式下，按 :kbd:`Ctrl` + :kbd:`v` 键进入可视化（块）模式

日常科研中大部分时间会花在命令模式和插入模式，所有需要用鼠标做的事，都可以用键盘完成。

vim 基本操作
^^^^^^^^^^^^^

使用 vim 编辑器打开 :file:`hello-world.txt` 文件，若文件不存在则创建该文件。同时使用以上按键
在不同的操作模式之间进行切换，并观察左下角地显示::

    # 若 vim 后面没有文件名，也会进入 vim
    $ vim hello-world.txt

进入插入模式，输入 Hello World，然后回到命令模式。假设这时文本输入完毕，我们可以进入底线命令模式
（按下 :kbd:`:` 键），这时光标会立即跳到屏幕下方的命令行。然后输入 :kbd:`wq` 即可保存文件并退出 vim。

底线命令模式有很多功能，包括打开、保存、关闭文件以及退出 vim：

- :kbd:`:q` 退出 vim，并关闭窗口
- :kbd:`:w` 保存文件
- :kbd:`:wq` 保存文件然后退出 vim
- :kbd:`:e filename` 打开想要编辑的文件（名叫 filename）
- :kbd:`:ls` 显示打开的缓存
- :kbd:`:help 标题` 打开帮助文档

  - :kbd:`:help :w` 打开 :kbd:`:w` 命令的帮助文档
  - :kbd:`:help w` 打开 :kbd:`w` 移动的帮助文档

在命令模式下，可以使用以下常用移动命令在文本中快速移动：

- 基本移动：\ :kbd:`h`\（左）、\ :kbd:`j`\（下）、\ :kbd:`k`\（上）、\ :kbd:`l`\（右）。也可以使用上下左右键
- 词：\ :kbd:`w`\ （下一个词）、\ :kbd:`b`\ （词初）、\ :kbd:`e`\ （词尾）
- 行： \ :kbd:`0`\ （行初）、\ :kbd:`^`\ （第一个非空格字符）、\ :kbd:`$`\ （行尾）
- 屏幕：\ :kbd:`Shift` + :kbd:`h`\ （屏幕首行）、\ :kbd:`Shift` + :kbd:`m`\ （屏幕中间）、\ :kbd:`Shift` + :kbd:`l`\ （屏幕底部）
- 翻页：\ :kbd:`Ctrl` + :kbd:`u`\ （上翻）、\ :kbd:`Ctrl` + :kbd:`d`\ （下翻）
- 文件：\ :kbd:`gg`\ （文件头）、\ :kbd:`Shift` + :kbd:`g`\ （文件尾）
- 行数：{number} + :kbd:`Shift` + :kbd:`g` 会移动至行号为 number（如 20）的行（第 20 行）

在命令模式下，可以使用以下常用编辑命令修改文本：

- :kbd:`i` 进入插入模式，可以输入文本
- :kbd:`Shift` + :kbd:`o` 和 :kbd:`o` 分别在当前行之上和之下插入一行，并进入插入模式
- :kbd:`d` + 移动命令。例如，\ :kbd:`dw` 删除词, :kbd:`d$` 删除到行尾, :kbd:`d0` 删除到行头
- :kbd:`dd` 删除当前行
- :kbd:`u` 撤销上一次修改
- :kbd:`yy` 复制当前行
- :kbd:`p` 把复制内容粘贴到当前行的下面

vim 配置
^^^^^^^^^


vim 插件
^^^^^^^^^

