编辑器
=======

:本节贡献者: |姚家园|\（作者）、
             |田冬冬|\（审稿）
:最近更新日期: 2021-03-01
:预计花费时间: 30 分钟

----

不管是编辑文本文件、脚本还是程序源码，都需使用一个叫做\ **编辑器**\ 的程序。
Windows 自带的编辑器是记事本（Notepad），macOS 自带的编辑器是 TextEdit，
Linux 自带的编辑器一般是 Gedit。日常科研中，不建议使用这些编辑器，而建议
学习并掌握其他具有更强大、更高效功能的编辑器。

学习编辑器
----------

日常科研中，我们大部分时间都花在编写代码和文本文件上。因此，花点时间掌握某个适合自己的编辑器是非常必要的，
也是十分值得的。学习和掌握一个新编辑器的步骤通常如下：

- 阅读教程：例如，官方文档、本章教程等
- 坚持使用新编辑器来完成所有的编辑工作：刚开始可能会让工作效率降低
- 随时查阅：如果新编辑器的某个操作看起来像是有更方便的实现方法，一般情况下真的会有；如果觉得新编辑器
  若具有一些功能可能会提高效率，一般情况下真的会有

按照上述步骤并坚持使用新的编辑器完成所有的编辑任务，则学习一个复杂的编辑器的过程通常是这样的：

- 学习编辑器的基本操作（如前两个小时）：例如，打开和编辑文件、保存与退出等
- 学习时间累计达到一定时间后（如 20 个小时），使用新编辑器的效率会和使用老编辑器一样快
- 此后，新编辑器的益处开始显现。因为有了足够的知识和肌肉记忆后，使用新编辑器将大大节省时间

现代编辑器都是一个复杂且强大的工具，永远有新东西可学：\ **学的越多，效率越高**\ 。

选择编辑器
----------

当前存在许多优秀的编辑器，该使用哪个呢？这个问题并没有标准答案。选择其中一个一直用下去，遇到需要重复劳动或者不顺心的地方时，
就去寻找解决办法，如更新配置和安装插件。有了足够多的知识和经验后，可以选择是否继续使用老编辑器，或尝试和更换新编辑器。

按照操作方式，编辑器可分为两种类型：基于命令行的和图形化的。基于命令行的编辑器一般启动较快，操作高效；图形化编辑器启动慢一点，
但功能更加强大。

按照功能，编辑器又大致可分为三种类型：文本编辑器、代码编辑器以及集成开发环境（Integrated Development Environment，简称 IDE）。
顾名思义，文本编辑器主要用于编写一大段文本，代码编辑器主要用于编写代码，IDE 主要用于开发大型软件。
按照功能进行分类主要考虑该编辑器更适用（即更高效、更快捷）做哪种编辑工作，不代表其不能用于其他工作。
例如，代码编辑器和 IDE 也可以编辑一大段文本（代码和软件本身也是文本啊），文本编辑器也可以编写代码和软件，
代码编辑器一般也有 IDE 的部分集成开发功能。一般而言，文本编辑器启动速度最快，集成开发环境最慢。

例如，按照以上分类，`vim <https://www.vim.org/>`__ 编辑器是一款基于命令行的文本或代码编辑器，
`Visual Studio Code <https://code.visualstudio.com/>`__\ （VS Code）是一款图形化的代码编辑器或 IDE，
`PyCharm <https://www.jetbrains.com/pycharm/>`__ 是一款图形化的IDE（主要开发 Python 语言写的软件）。

需要注意的是，编写代码时，经常要在文件间进行切换，并阅读、浏览和修改代码，而不是连续编写一大段文字，因此编写代码和
编辑一长段纯文本是很不一样的。编写程序/软件时，还需要进行编译、链接、调试、版本控制等。因此，纯粹的代码编辑器和 IDE 是有所区别的，
前者主要是让我们优雅地编写代码，后者集成了诸如编译、链接、调试、版本控制等功能，主要是让我们更高效地开发程序（往往是大型软件）。

对于刚接触编辑器的读者，我们根据个人经验推荐一些编辑器。熟练掌握这些编辑器后，可以尝试和使用其他更适合自己的编辑器。

- VS Code 是目前最流行的代码编辑器或 IDE。启动较快，编辑文本也非常高效。\ **推荐**\ 在日常科研中使用 VS Code 编辑文本和代码
- vim 是目前最流行的基于命令行的文本或代码编辑器，有时候可能是用户唯一可以使用的编辑器。\ **推荐**\ 掌握 vim 的基本编辑功能，
  以便在无法使用 VS Code 或编辑简单的文本/代码时使用

VS Code
-------

安装 VS Code 可以参考\ :doc:`setup`\ 中相应操作系统下的“日常软件”一节。

刚接触 VS Code 的用户在编辑文本和代码遇到疑问时，可随时通过以下方式查阅：

- 点击 VS Code 菜单栏“帮助”，选择相关选项。例如，“交互式演练场”、“文档”（Visual Studio Code 官方文档）、“键盘快捷键参考”等
- 使用 Google 搜索

建议在日常科研中随时根据个人习惯，去配置 VS Code、安装和使用扩展包等。

.. dropdown:: :fa:`exclamation-circle,mr-1` 安装 VS Code 中文语言包
   :container: + shadow
   :title: bg-info text-white font-weight-bold

   VS Code 的界面默认显示语言是英文，可以安装中文语言包。点击菜单栏“查看”后选择“命令面板”
   （快捷键：\ :kbd:`Ctrl` + :kbd:`Shift` + :kbd:`p`\ ），接着输入“configure display language”并按
   :kbd:`Enter` 键，然后选择“安装其他语言”。这时界面会跳转到插件商店并自动搜索其他语言，一般第一个就是中文，
   即 “Chinese (Simplified) Language Pack for Visual Studio Code”，点击安装就行了。
   安装完之后自动重启，界面就变成中文了。

.. dropdown:: :fa:`exclamation-circle,mr-1` 远程计算机中使用 VS Code
   :container: +shadow
   :title: bg-info text-white font-weight-bold

   编辑远程计算机文件的传统方法是先使用 ssh 命令登录到远程计算机，然后在远程计算机中使用 vim 编辑器编辑文件。

   现在，我们可以借助 VS Code 扩展包 Remote - SSH，使用 VS Code 编辑远程文件，这极大地提高编辑效率。
   这里简要介绍如何安装和使用该扩展包，可以参考 VS Code 官方文档 `ssh <https://code.visualstudio.com/docs/remote/ssh>`__
   了解详细用法。

   1.  安装 Remote - SSH 扩展包

       在“扩展”中，搜索“Remote - SSH”，点击安装。

       安装完之后，左下角导航栏会多一个类似 ``><`` 的远程连接图标。之后可以通过点击该图标来使用该扩展包。

   2.  配置远程计算机的 SSH 主机

       一般情况下，远程计算机已安装 SSH 服务器，本地计算机已安装 SSH 客户端。我们还需要配置基于密钥的认证，
       这也是 VS Code 官方推荐的认证方式。以下命令假设本地和远程计算机都是 Linux 或 macOS 系统，
       远程计算机的 IP 地址是 192.168.1.100，用户在远程计算机中的用户名是 seismo-learn。
       可以参考 `SSH 教程：SSH 密钥登录 <https://wangdoc.com/ssh/key.html>`__
       进一步学习更详细的配置过程。

       本地计算机下，运行以下命令生成 SSH 密钥::

           $ ssh-keygen -t rsa -f ~/.ssh/id_rsa-remote-ssh

       该命令产生的一对 SSH 密钥分别位于 :file:`~/.ssh/id_rsa-remote-ssh` 和 :file:`~/.ssh/id_rsa-remote-ssh.pub` 文件中。
       前者是私钥文件，不能泄露；后者是公钥文件，需要告诉远程计算机。
      
       运行以下命令将公钥复制到远程计算机中（需用户输入远程计算机的密码）::

           $ ssh-copy-id -i ~/.ssh/id_rsa-remote-ssh.pub seismo-learn@192.168.1.100

       该命令会把本地的公钥以追加的方式复制到远程计算机的 :file:`~/.ssh/authorized_keys` 文件中，并给远程计算机
       中的用户家目录、:file:`~/.ssh` 目录以及 :file:`~/.ssh/authorized_keys` 设置合适的权限。
       若远程计算机或本地计算机是 Windows 系统，请参考
       `Quick start: Using SSH keys <https://code.visualstudio.com/docs/remote/troubleshooting#_quick-start-using-ssh-keys>`__
       进行配置。

       在终端中输入以下命令，验证是否配置是否成功（即可以登录远程计算机）::

           $ ssh seismo-learn@192.168.1.100

   3.  编辑远程文件

       点击左下角的远程连接图标，选择“Remote-SSH: Connect to Host”，输入 seismo-learn@192.168.1.100
       便可使用 VS Code 编辑远程计算机中的文件了。

   4.  退出远程连接

       文件编辑完毕后，选择菜单栏“文件”中的“关闭远程连接”，或者直接关闭 VS Code，就可以退出远程连接。

   .. tip::

      如果需要经常连接远程计算机，可以使用 SSH 配置文件。
      
      在活动栏中选择“远程资源管理器”，点击“配置”后选择 :file:`~/.ssh/config` 配置文件，按照以下格式
      添加相关信息到该文件中::

          Host seismology
              User seismo-learn
              HostName 192.168.1.100
              IdentityFile ~/.ssh/id_rsa-remote-ssh

      第一列是关键词，如 Host、User、HostName、IdentityFile，第二列是对应的值。seismology
      是用户自定义的远程主机标识，其他三个值同上文。可以按照该格式，向该文件中添加多个远程计算机。

      点击左下角的远程连接图标，选择“Remote-SSH: Connect to Host”，点击“seismology”就可以登录远程计算机了。
      也可以通过“远程资源管理器”，点击“seismology”登录远程计算机。

   .. tip::

      如果远程计算机使用的 Shell 是 Bash，本地计算机是 Zsh，可能遇到无法启动 VS Code 的终端的问题。
      此时，需要修改一下配置文件以正确启动终端。
      
      打开命令面板，输入 Remote-SSH: Settings，搜索 terminal.integrated.shell.linux，将 "/bin/zsh"
      改为 "/bin/bash" 即可。详情请参考
      `microsoft/vscode-remote-release issues #38 <https://github.com/microsoft/vscode-remote-release/issues/38>`__

Vim
----

Vim 是一款基于命令行的编辑器，拥有以下特点：

- 使用键盘快速完成文本编辑。Vim 避免了使用鼠标，甚至避免用上下左右键，因为这些需要太多的手指移动。
  所有需要用鼠标的操作都可以用键盘完成
- 轻量级且执行快。对于许多简单任务，启动 vim 比使用图形化编辑器要快地多
- 很多 Linux 发行版都预装了 vim，某些时候可能是我们唯一能使用的编辑器，比如使用远程计算机

在大多数 Linux 发行版中，vim 也可以用 vi 替代。可以使用以下命令查看::

    $ which vim
    /usr/bin/vim

    $ which vi                          
    vi=vim

操作模式
^^^^^^^^^

Vim 的设计以大多数时间都花在阅读、浏览和进行少量编辑改动为基础。因此，它具有多种操作模式，以下只介绍几种常用模式：

- 正常模式：移动光标、复制、粘贴、删除等
- 插入模式：插入文本
- 命令模式：执行一些指令

在不同的操作模式下，键盘敲击的含义不同。Vim 默认会在左下角显示当前的操作模式。启动时的默认模式是正常模式，
可以使用以下方式，在不同模式之间进行切换：

- 按下 :kbd:`Esc` 键可以从任何其他模式返回正常模式
- 在正常模式下，按 :kbd:`i` 键进入插入模式
- 在正常模式下，按 :kbd:`:` 键进入命令模式

日常科研使用 vim 编辑器时，大部分时间处于正常模式和插入模式中。

基本操作
^^^^^^^^

使用 vim 编辑器打开 :file:`hello-world.txt` 文件，若文件不存在则创建该文件。使用以上按键
在不同操作模式之间进行切换，并观察左下角的显示::

    # 若 vim 后面没有文件名，也会进入 vim
    $ vim hello-world.txt

按 :kbd:`i` 键进入插入模式，输入 Hello World，然后按 :kbd:`Esc` 键回到正常模式。
假设文本输入完毕且处于正常模式，按下 :kbd:`:` 键进入命令模式，这时光标会立即跳到屏幕下方的命令行，
然后输入 :kbd:`wq` 即可保存文件并退出 vim。

命令模式的常用功能包括保存文件、退出 vim 等：

- :kbd:`:q` 退出 vim 并关闭窗口
- :kbd:`:w` 保存文件
- :kbd:`:wq` 保存文件并退出 vim

在正常模式下，可以使用以下常用移动命令在文本中快速移动：

- 行： \ :kbd:`0`\ （行初）、\ :kbd:`^`\ （第一个非空格字符）、\ :kbd:`$`\ （行尾）
- 文件：\ :kbd:`gg`\ （文件头）、\ :kbd:`Shift` + :kbd:`g`\ （文件尾）
- 行数：number + :kbd:`Shift` + :kbd:`g` 会移动至行号为 number（如 20）的行（即第 20 行）

在正常模式下，可以使用以下常用编辑命令修改文本：

- :kbd:`i` 进入插入模式，可以输入文本
- :kbd:`Shift` + :kbd:`o` 和 :kbd:`o` 分别在当前行之上和之下插入一行，并进入插入模式
- :kbd:`yy` 复制当前行
- :kbd:`p` 把复制内容粘贴到当前行的下面
- :kbd:`dd` 删除当前行
- :kbd:`u` 撤销上一次修改
- :kbd:`Ctrl` + :kbd:`r` 重做上一次修改

扩展阅读
^^^^^^^^^

本文只介绍了 vim 的一些常见用法。日常科研中需要经常使用 vim 的用户可以参考以下教程，
学习和掌握更多用法，配置 vim，以便更高效地编辑文本：

- `简明 VIM 练级攻略 <https://coolshell.cn/articles/5426.html>`__
- `Vim 配置入门 <http://www.ruanyifeng.com/blog/2018/09/vimrc.html>`__
